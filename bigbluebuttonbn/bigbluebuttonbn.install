<?php
/*
Plugin Name: BigBlueButtonBN
Plugin URI: http://blindsidenetworks.com/integration
Author: Blindside Networks
Author URI: http://blindsidenetworks.com/
Description: BigBlueButton is an open source web conferencing system. This module integrates BigBlueButton into Drupal allowing website administrators to create and manage meetings rooms that can be used by visitors and registred users. For more information on setting up your own BigBlueButton server or for using an external hosting provider visit http://bigbluebutton.org/support

Copyright 2011 Blindside Networks

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Versions:
7.x-1.0.x-dev	--  	Initial version written by Jesus Federico
(email : jesus [a t ] b l i n d si de n  et w o rks DOT ca)

*/
require_once( "bbb_api/bbb_api.php" );
include_once( "bigbluebuttonbn.admin.inc" );

/**
 * Implements hook_schema().
 */
function bigbluebuttonbn_schema() {

    $schema['bigbluebuttonbn'] = array(
            'description' => t('Meeting room settings.'),
            'fields' => array(
                    'mid' => array(
                            'type' => 'serial',
                            'unsigned' => TRUE,
                            'not null' => TRUE,
                            'description' => 'Primary Key: A unique ID for each registred meeting room.',
                    ),
                    'meeting_id' => array(
                            'type' => 'char',
                            'length' => 64,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Meeting room id.',
                    ),
                    'meeting_name' => array(
                            'type' => 'char',
                            'length' => 64,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Meeting room name.',
                    ),
                    'attendee_pass' => array(
                            'type' => 'char',
                            'length' => 32,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Attendee password.',
                    ),
                    'moderator_pass' => array(
                            'type' => 'char',
                            'length' => 32,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Moderator password.',
                    ),
                    'wait_for_moderator' => array(
                            'type' => 'int',
                            'not null' => TRUE,
                            'default' => 0,
                            'size' => 'tiny',
                            'description' => 'Flag to indicate whether or not attendees will wait for moderator to enter into rooms. (1 = Yes, 0 = No)',
                    ),
                    'newwindow' => array(
                            'type' => 'int',
                            'not null' => TRUE,
                            'default' => 0,
                            'size' => 'tiny',
                            'description' => 'Flag to indicate whether or not the meetings will start in a new window. (1 = Yes, 0 = No)',
                    ),
                    'record' => array(
                            'type' => 'int',
                            'not null' => TRUE,
                            'default' => 0,
                            'size' => 'tiny',
                            'description' => 'Flag to indicate whether or not the meeting will be recorded. (1 = Yes, 0 = No)',
                    ),
                    'description' => array(
                            'type' => 'char',
                            'length' => 255,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Description for the meeting recording.',
                    ),
                    'welcome' => array(
                            'type' => 'char',
                            'length' => 255,
                            'not null' => TRUE,
                            'default' => '',
                            'description' => 'Welcome message to be showed on the chat meeting window.',
                    ),
                    'timeavailable' => array(
                            'type' => 'int',
                            'not null' => TRUE,
                            'default' => 0,
                            'size' => 'big',
                            'description' => 'Timestamp indicating the time since the meeting is avialable.',
                    ),
                    'timedue' => array(
                            'type' => 'int',
                            'not null' => TRUE,
                            'default' => 0,
                            'size' => 'big',
                            'description' => 'Timestamp indicating the time until the meeting is avialable.',
                    ),
            ),
            'primary key' => array('mid'),
            'indexes' => array(
                    'meeting_name' => array('meeting_name'),
            ),
  		);

    return $schema;

}


/**
 * Implements hook_install().
 */
function bigbluebuttonbn_install() {
    //Set BigBLueButton server values by default
    variable_set('bigbluebuttonbn_server_url', 'http://test-install.blindsidenetworks.com/bigbluebutton/');
    variable_set('bigbluebuttonbn_server_salt', '8cd8ef52e8e101574e400365b55e11a6');
    
    // Insert a default contact category.
    $sitename = variable_get('site_name', '');
    db_insert('bigbluebuttonbn')
    ->fields(array(
            'meeting_id' => bigbluebuttonbn_rand_string( 16 ),
            'meeting_name' => 'My Meeting',
            'description' => 'Drupal 7 demo meeting '.($sitename!=''? 'for '.$sitename: ''),
            'attendee_pass' => 'ap',
            'moderator_pass' => 'mp',
            'wait_for_moderator' => 0,
    ))
    ->execute();

    // Default roles to access meeting rooms
    $roles = array_map('check_plain', user_roles(TRUE));

    if (!array_key_exists('bbb attendee', $roles)) {
        $role = (object) array('name' => t('bbb attendee'));
        user_role_save($role);
    }
    if (!array_key_exists('bbb moderator', $roles)) {
        $role = (object) array('name' => t('bbb moderator'));
        user_role_save($role);
    }
}

/**
 * Implementation of hook_uninstall().
 */
function bigbluebuttonbn_uninstall() {
    // Remove all Disqus-related variables.
    db_delete('variable')->condition('name', 'bigbluebuttonbn_%', 'LIKE')->execute();

    variable_del('bigbluebuttonbn');

    $roles = db_select('role', 'r')
    ->fields('r', array('rid', 'name', 'weight'))
    ->orderBy('rid')
    ->execute()
    ->fetchAll();

    foreach( $roles as $role ){
        if ( $role->name == 'bbb attendee' || $role->name == 'bbb moderator' ){
            user_role_delete((int) $role->rid);
        }
    }

}


?>